using AutoMapper;
using #NAMESPACE#.Application.Interfaces;
using #NAMESPACE#.Application.Services.Common;
using #NAMESPACE#.Application.ViewModels;
using #NAMESPACE#.Domain.Entities;
using #NAMESPACE#.Domain.Interfaces.Service;

namespace #NAMESPACE#.Application.Services
{
    public class #CLASSNAME#AppService : ApplicationService,I#CLASSNAME#AppService
    {
        
        private readonly IRepository<#CLASSNAME#, Guid> _#VARCLASSNAME#Repository;

        public #CLASSNAME#AppService(
            IRepository<#CLASSNAME#, Guid> #VARCLASSNAME#Repository
            )
        {
            _#VARCLASSNAME#Repository = #VARCLASSNAME#Repository;
        }
        #region 增删改查基础方法

        public async Task<#CLASSNAME#Dto> Get(Guid id)
        {
            var data = await _#VARCLASSNAME#Repository.GetAsync(id);
            var dto = ObjectMapper.Map<#CLASSNAME#, #CLASSNAME#Dto>(data);
            return dto;
        }

        public async Task<PagedResultDto<#CLASSNAME#Dto>> GetAll(Get#CLASSNAME#InputDto input)
        {
            var query = (await _#VARCLASSNAME#Repository.GetQueryableAsync()).WhereIf(!string.IsNullOrWhiteSpace(input.Filter), a => a.Name.Contains(input.Filter));

            var totalCount = await query.CountAsync();
            var items = await query.OrderBy(input.Sorting ?? "Id")
                        .ToListAsync();

            var dto = ObjectMapper.Map<List<#CLASSNAME#>, List<#CLASSNAME#Dto>>(items);
            return new PagedResultDto<#CLASSNAME#Dto>(totalCount, dto);
        }

        public async Task<#CLASSNAME#Dto> CreateOrUpdate(CreateOrUpdate#CLASSNAME#Dto input)
        {
            #CLASSNAME# result = null;
            if (!input.Id.HasValue)
            {
                input.Id = GuidGenerator.Create();
                result = await _#VARCLASSNAME#Repository.InsertAsync(ObjectMapper.Map<CreateOrUpdate#CLASSNAME#Dto, #CLASSNAME#>(input));
            }
            else
            {
                var data = await _#VARCLASSNAME#Repository.GetAsync(input.Id.Value);
                result = await _#VARCLASSNAME#Repository.UpdateAsync(ObjectMapper.Map(input, data));
            }
            return ObjectMapper.Map<#CLASSNAME#, #CLASSNAME#Dto>(result);
        }

        public async Task Delete(List<Guid> ids)
        {
            foreach (var item in ids)
            {
                await _#VARCLASSNAME#Repository.DeleteAsync(item);
            }

        }

     
        #endregion

    }
}